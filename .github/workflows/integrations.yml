name: Build node.js app
on:
    push:
        branches:
            - main
env:
  AWS_REGION: us-east-2
  ECS_CLUSTER: app_cluster
  CONTAINER_NAME: app
  ECS_SERVICE: app_service
  ECS_TD: .github/workflows/task-definition.json


jobs:
    deploy-project:
        name: Deploy project
        runs-on: ubuntu-latest
        steps:
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v3
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: us-east-2
        
        # ECR login
        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1
          with:
            mask-password: 'true'
        
        # build, tag, and push to ECR
        - name: Build, tag, and push image to Amazon ECR
          id: build-image
          env:
            REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            REPOSITORY: app_repo
            IMAGE_TAG_LATEST: latest
            IMAGE_TAG_RUN_NUMBER: ${{ github.run_number }}
          run: |
            docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG_LATEST -t $REGISTRY/$REPOSITORY:$IMAGE_TAG_RUN_NUMBER .
            docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG_LATEST
            docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG_RUN_NUMBER
            echo "image=$REGISTRY/REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

        - name: Fill in the new image ID in the Amazon ECS task definition
          id: task-def-1
          uses: aws-actions/amazon-ecs-render-task-definition@v1
          with:
            task-definition: ${{ env.ECS_TD }}
            container-name: ${{ env.CONTAINER_NAME }}
            image: ${{ steps.build-image.outputs.image }}

        - name: Deploy Amazon ECS task definition
          uses: aws-actions/amazon-ecs-deploy-task-definition@v1
          with:
              task-definition: ${{ steps.task-def-1.outputs.task-definition }}
              service: ${{ env.ECS_SERVICE }}
              cluster: ${{ env.ECS_CLUSTER }}
              wait-for-service-stability: false